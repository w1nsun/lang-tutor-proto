// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: auth/auth.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Auth_SignUpOrg_FullMethodName     = "/auth.Auth/SignUpOrg"
	Auth_SignUpManager_FullMethodName = "/auth.Auth/SignUpManager"
	Auth_SignInManager_FullMethodName = "/auth.Auth/SignInManager"
	Auth_SignUpStudent_FullMethodName = "/auth.Auth/SignUpStudent"
	Auth_SignInStudent_FullMethodName = "/auth.Auth/SignInStudent"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	SignUpOrg(ctx context.Context, in *SignUpOrgRequest, opts ...grpc.CallOption) (*SignUpOrgResponse, error)
	SignUpManager(ctx context.Context, in *SignUpManagerRequest, opts ...grpc.CallOption) (*SignUpManagerResponse, error)
	SignInManager(ctx context.Context, in *SignInManagerRequest, opts ...grpc.CallOption) (*SignInManagerResponse, error)
	SignUpStudent(ctx context.Context, in *SignUpStudentRequest, opts ...grpc.CallOption) (*SignUpStudentResponse, error)
	SignInStudent(ctx context.Context, in *SignInStudentRequest, opts ...grpc.CallOption) (*SignInStudentResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) SignUpOrg(ctx context.Context, in *SignUpOrgRequest, opts ...grpc.CallOption) (*SignUpOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpOrgResponse)
	err := c.cc.Invoke(ctx, Auth_SignUpOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignUpManager(ctx context.Context, in *SignUpManagerRequest, opts ...grpc.CallOption) (*SignUpManagerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpManagerResponse)
	err := c.cc.Invoke(ctx, Auth_SignUpManager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignInManager(ctx context.Context, in *SignInManagerRequest, opts ...grpc.CallOption) (*SignInManagerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInManagerResponse)
	err := c.cc.Invoke(ctx, Auth_SignInManager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignUpStudent(ctx context.Context, in *SignUpStudentRequest, opts ...grpc.CallOption) (*SignUpStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpStudentResponse)
	err := c.cc.Invoke(ctx, Auth_SignUpStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignInStudent(ctx context.Context, in *SignInStudentRequest, opts ...grpc.CallOption) (*SignInStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInStudentResponse)
	err := c.cc.Invoke(ctx, Auth_SignInStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
type AuthServer interface {
	SignUpOrg(context.Context, *SignUpOrgRequest) (*SignUpOrgResponse, error)
	SignUpManager(context.Context, *SignUpManagerRequest) (*SignUpManagerResponse, error)
	SignInManager(context.Context, *SignInManagerRequest) (*SignInManagerResponse, error)
	SignUpStudent(context.Context, *SignUpStudentRequest) (*SignUpStudentResponse, error)
	SignInStudent(context.Context, *SignInStudentRequest) (*SignInStudentResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) SignUpOrg(context.Context, *SignUpOrgRequest) (*SignUpOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpOrg not implemented")
}
func (UnimplementedAuthServer) SignUpManager(context.Context, *SignUpManagerRequest) (*SignUpManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpManager not implemented")
}
func (UnimplementedAuthServer) SignInManager(context.Context, *SignInManagerRequest) (*SignInManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInManager not implemented")
}
func (UnimplementedAuthServer) SignUpStudent(context.Context, *SignUpStudentRequest) (*SignUpStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpStudent not implemented")
}
func (UnimplementedAuthServer) SignInStudent(context.Context, *SignInStudentRequest) (*SignInStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInStudent not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_SignUpOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignUpOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SignUpOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignUpOrg(ctx, req.(*SignUpOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignUpManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignUpManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SignUpManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignUpManager(ctx, req.(*SignUpManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignInManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignInManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SignInManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignInManager(ctx, req.(*SignInManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignUpStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignUpStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SignUpStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignUpStudent(ctx, req.(*SignUpStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignInStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignInStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SignInStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignInStudent(ctx, req.(*SignInStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUpOrg",
			Handler:    _Auth_SignUpOrg_Handler,
		},
		{
			MethodName: "SignUpManager",
			Handler:    _Auth_SignUpManager_Handler,
		},
		{
			MethodName: "SignInManager",
			Handler:    _Auth_SignInManager_Handler,
		},
		{
			MethodName: "SignUpStudent",
			Handler:    _Auth_SignUpStudent_Handler,
		},
		{
			MethodName: "SignInStudent",
			Handler:    _Auth_SignInStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}
